
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo ='junegunn/fzf'
build="./install --all"


[[plugins]]
repo ='junegunn/fzf.vim'
hook_add='''
nnoremap <Space>f :Files<CR>
nnoremap <Space>s :GFiles?<CR>
nnoremap <Space>h :History<CR>
nnoremap <Space>c :Commits<CR>
nnoremap <Space>l :Lines<CR>
nnoremap <Space>a :Ag<Space>
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add='''
source ~/.vim/plugins/nerdcommenter.vim
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
source ~/.vim/plugins/colorscheme.vim
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
source ~/.vim/plugins/indentline.vim
'''

[[plugins]]
repo = 'scrooloose/syntastic'
hook_post_source = '''
source ~/.vim/plugins/syntastic.vim
'''

[[plugins]]
repo = 'tpope/vim-fugitive' 
hook_add = '''
source ~/.vim/plugins/fugitive.vim
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
source ~/.vim/plugins/lightline.vim
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
source ~/.vim/plugins/vim-rooter.vim
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
source ~/.vim/plugins/neocomplete.vim
'''

[[plugins]]
depends = ['Shougo/neocomplete.vim']
repo = 'Shougo/neosnippet'
hook_add = '''
source ~/.vim/plugins/neosnippet.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'tshirtman/vim-cython'

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo ='gregsexton/MatchTag'


[[plugins]]
repo ='junegunn/vim-easy-align'
hook_add='''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo ='cohama/lexima.vim'

[[plugins]]
repo = "sheerun/vim-polyglot"

[[plugins]]
repo = "christoomey/vim-tmux-navigator"

[[plugins]]
repo = "benmills/vimux"
hook_add='''
function! s:compile_and_run()
    exec 'wa'
    call VimuxRunCommand('clear') 
    if &filetype == 'c'
        call VimuxRunCommand('gcc % -o %<; time ./' . expand('%<')) 
    elseif &filetype == 'sh'
        call VimuxRunCommand('bash ' . expand('%')) 
    elseif &filetype == 'python'
        call VimuxRunCommand('python ' . expand('%')) 
    elseif &filetype == 'python.pytest'
        call VimuxRunCommand('pytest --capture=no ' . expand('%')) 
    elseif &filetype == 'ruby'
        call VimuxRunCommand('ruby ' . expand('%')) 
    elseif &filetype == 'plantuml'
        call VimuxRunCommand('plantuml ' . expand('%')) 
    endif
endfunction

nnoremap <Space>rr :call <SID>compile_and_run()<CR>
nnoremap <Space>e :<C-u>VimuxPromptCommand<CR>
nnoremap <Space>el :<C-u>VimuxRunLastCommand<CR>
nnoremap <Space>i :<C-u>VimuxInspectRunner<CR>
'''

[[plugins]]
repo = "edkolev/tmuxline.vim"
hook_add='''
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
    \'a'    : '#S',
    \'b'    : '#W',
    \'c'    : '#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)',
    \'cwin' : ['#I', '#W'],
    \'win'  : ['#I', '#W'],
    \'x'    : '#{?client_prefix,Prefix,      }',
    \'y'    : ['%a', '%e-%b-%Y', '%l:%M%p'],
    \'z'    : '#h'}
'''




